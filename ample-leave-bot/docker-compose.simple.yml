version: "3.9"

services:
  # PostgreSQL Database with pgvector
  db:
    image: pgvector/pgvector:pg17
    container_name: ample-leave-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-ample_leave_bot}
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - ample-leave-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-ample_leave_bot}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: ample-leave-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - ample-leave-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main Application with PM2
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: ample-leave-app
    restart: unless-stopped
    environment:
      # Application
      NODE_ENV: production
      PORT: 3000
      
      # Database
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-ample_leave_bot}
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # OpenAI
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MAX_TOKENS: ${OPENAI_MAX_TOKENS:-2000}
      OPENAI_TIMEOUT: ${OPENAI_TIMEOUT:-30000}
      
      # Slack
      SLACK_BOT_TOKEN: ${SLACK_BOT_TOKEN}
      SLACK_SIGNING_SECRET: ${SLACK_SIGNING_SECRET}
      SLACK_APP_TOKEN: ${SLACK_APP_TOKEN}
      SLACK_TEAM_ID: ${SLACK_TEAM_ID}
      
      # Admin
      ADMIN_TOKEN: ${ADMIN_TOKEN}
      
      # RAG Configuration
      USE_RAG: ${USE_RAG:-true}
      RAG_REBUILD_ON_START: ${RAG_REBUILD_ON_START:-false}
      CHUNK_SIZE: ${CHUNK_SIZE:-2000}
      CHUNK_OVERLAP: ${CHUNK_OVERLAP:-300}
      TOP_K: ${TOP_K:-10}
      DEFAULT_COUNTRY: ${DEFAULT_COUNTRY:-IN}
      EMBEDDING_MODEL: ${EMBEDDING_MODEL:-text-embedding-3-small}
      EMBEDDING_DIM: ${EMBEDDING_DIM:-1536}
      
      # Performance
      UV_THREADPOOL_SIZE: ${UV_THREADPOOL_SIZE:-128}
      NODE_OPTIONS: "--max-old-space-size=4096 --max-semi-space-size=128"
      
      # PM2 Configuration
      API_INSTANCES: ${API_INSTANCES:-2}
      SLACK_INSTANCES: ${SLACK_INSTANCES:-2}
    
    volumes:
      # Application logs
      - app_logs:/app/logs
      # Document storage
      - ./docs:/app/docs
      # Backup access
      - ./backups:/app/backups
    
    ports:
      - "${APP_PORT:-3000}:3000"
    
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    networks:
      - ample-leave-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

# Named volumes for data persistence
volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

# Custom network
networks:
  ample-leave-network:
    driver: bridge
